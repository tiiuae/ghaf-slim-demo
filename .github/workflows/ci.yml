# SPDX-FileCopyrightText: 2025 TII (SSRC) and the Ghaf contributors
#
# SPDX-License-Identifier: Apache-2.0

name: ci

permissions:
  contents: read

on:
  push:
    branches:
      - main
  pull_request_target:
    branches:
      - main

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: Debug
        run: |
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.repository: ${{ github.repository }}"
          echo "github.event.pull_request.head.repo.full_name: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "github.actor: ${{ github.actor }}"
          echo "github.ref: ${{ github.ref }}"
          echo "github.event.pull_request.head.sha: ${{ github.event.pull_request.head.sha }}"

  authorize:
    # Important: 'authorize' must run before checkout to ensure 'authorize.yml'
    # runs the base version, not the untrusted version from the PR.
    uses: ./.github/workflows/authorize.yml
    # Skip running in forked repositories, since the workflow run would fail
    # due to missing repository secret(s):
    if: ${{ github.repository == 'tiiuae/ghaf-slim-demo' }}
    with:
      github-org: tiiuae
    secrets:
      read-org-members: ${{ secrets.READ_ORG_MEMBERS }}

  check:
    runs-on: ubuntu-latest
    needs: [authorize]
    if: needs.authorize.outputs.result == 'authorized'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          fetch-depth: 0
      - name: Install nix
        uses: cachix/install-nix-action@d1ca217b388ee87b2507a9a93bf01368bde7cec2 # v31
      - name: Check .nix formatting
        run: nix fmt -- --fail-on-change
      - name: Check reuse lint
        run: nix develop --command reuse lint
      - name: Check nix flake show runs successfully
        run: nix flake show --all-systems

  build:
    runs-on: ubuntu-latest
    needs: [authorize]
    if: needs.authorize.outputs.result == 'authorized'
    timeout-minutes: 360
    strategy:
      matrix:
        include:
          - arch: x86_64-linux
          - arch: aarch64-linux
    concurrency:
      # Cancel any in-progress workflow runs from the same PR or branch,
      # allowing matrix jobs to run concurrently:
      group: ${{ github.workflow }}.${{ github.event.pull_request.number || github.ref }}.${{ matrix.arch }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          fetch-depth: 0
      - name: Install nix
        uses: cachix/install-nix-action@d1ca217b388ee87b2507a9a93bf01368bde7cec2 # v31
      - name: Init ssh-agent
        uses: webfactory/ssh-agent@a6f90b1f127823b31d4d4a8d96047790581349bd # v0.9.1
        with:
          ssh-private-key: ${{ secrets.BUILDER_SSH_KEY }}
      - name: Add builders to ssh_known_hosts
        run: |
          sudo sh -c "echo '${{ vars.BUILDER_SSH_KNOWN_HOST }}' >>/etc/ssh/ssh_known_hosts"
      - name: Build on the remote builder
        run: |
          if [ "${{ matrix.arch }}" == "x86_64-linux" ]; then
            OPTS="--remote '${{ vars.BUILDER_X86 }}' --cachix-cache ghaf-dev"
            FILTER='^checks\.x86_64-linux\..*debug$'
          elif [ "${{ matrix.arch }}" == "aarch64-linux" ]; then
            OPTS="--remote '${{ vars.BUILDER_AARCH64 }}'"
            FILTER='^checks\.aarch64-linux\..*debug$'
          else
            echo "::error::Unknown architecture: '${{ matrix.arch }}'"
            exit 1
          fi
          nix develop --command bash -c ".github/nix-fast-build.sh -f '$FILTER' -o '$OPTS'"
